{"version":3,"sources":["webpack:///crmApp.js","webpack:///webpack/bootstrap 34cf02288e6015411a04","webpack:///./src/crmApp.js","webpack:///./src/common/crmEntity.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","crmContext","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_crmEntity","Xrm","this","name","crmAttr","get","crmEntity","window","attrname","Page","getAttribute","contname","getControl","ui","tabs","error","getval","getValue","Array","isArray","v","obj","arguments","mode","setVisible","disabled","setDisabled","a","addOnChange","fireOnChange","removeOnChange","setRequiredLevel","modestr","setSubmitMode","val","type","toValue","userid","entityType","username","setFocus","_type","Promise","resolve","reject","message","console","save","data","refreshRibbon","Utility","openEntityForm","entity","getEntityName","getId","state","Controls","controls","arr","Tabs","handle","_this","conArr","concat","forEach","item","tab","index","indexOf","splice","bind","Sections","sections","_this2","section","sec","getSections","_this3","control","controlType","getControlType","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","getFirst","getName","err","getFormType","context","getUserId","getUserName"],"mappings":"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","file":"crmApp.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/assets/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.crmContext = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _crmEntity = __webpack_require__(1);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar crmContext = exports.crmContext = function () {\n\t    function crmContext(Xrm) {\n\t        _classCallCheck(this, crmContext);\n\t\n\t        this.Xrm = Xrm;\n\t    }\n\t\n\t    _createClass(crmContext, [{\n\t        key: 'attr',\n\t        value: function attr(name) {\n\t            return new _crmEntity.crmAttr(this.Xrm, name);\n\t        }\n\t    }, {\n\t        key: 'entity',\n\t        get: function get() {\n\t            return new _crmEntity.crmEntity(this.Xrm);\n\t        }\n\t    }]);\n\t\n\t    return crmContext;\n\t}();\n\t\n\twindow.crmContext = crmContext;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar crmAttr = function () {\n\t    function crmAttr(Xrm, name) {\n\t        _classCallCheck(this, crmAttr);\n\t\n\t        if (!Xrm || !name) {\n\t            return;\n\t        }\n\t        this.name = name;\n\t        this.attrname = Xrm.Page.getAttribute(name);\n\t        this.contname = Xrm.Page.getControl(name);\n\t        this.crmEntity = new crmEntity(Xrm);\n\t        if (!this.contname) {\n\t            this.contname = Xrm.Page.ui.tabs.get(name);\n\t        }\n\t        if (!this.attrname || !this.contname) {\n\t            this.error('not found ' + this.name);\n\t        }\n\t    }\n\t    //获取字段值 crm方法\n\t\n\t\n\t    _createClass(crmAttr, [{\n\t        key: 'getValue',\n\t        value: function getValue() {\n\t            var getval = this.attrname.getValue();\n\t            return getval;\n\t        }\n\t        //获取字段值 Lookup返回第一个值\n\t\n\t    }, {\n\t        key: 'get',\n\t        value: function get() {\n\t            if (!this.attrname) {\n\t                return this;\n\t            }\n\t            var getval = this.attrname.getValue();\n\t            if (Array.isArray(getval)) {\n\t                return getval.length > 0 ? getval[0] : {};\n\t            }\n\t            return getval;\n\t        }\n\t        //设置和获取值  lookup获取Id\n\t\n\t    }, {\n\t        key: 'val',\n\t        value: function val(v) {\n\t            var obj = null;\n\t            if (!this.attrname) {\n\t                return this;\n\t            }\n\t            obj = this.attrname[arguments.length > 0 ? 'setValue' : 'getValue'](v);\n\t            if (Array.isArray(obj)) {\n\t                obj = obj[0].id;\n\t            }\n\t            if (arguments.length > 0) {\n\t                this.mode();\n\t            }\n\t            return arguments.length === 0 ? obj : this;\n\t        }\n\t        //显示\n\t\n\t    }, {\n\t        key: 'show',\n\t        value: function show() {\n\t            if (this.contname) {\n\t                this.contname.setVisible(!0);\n\t            }\n\t            return this;\n\t        }\n\t        //隐藏\n\t\n\t    }, {\n\t        key: 'hide',\n\t        value: function hide() {\n\t            if (this.contname) {\n\t                this.contname.setVisible(!1);\n\t            }\n\t            return this;\n\t        }\n\t        //禁用\n\t\n\t    }, {\n\t        key: 'disabled',\n\t        value: function disabled() {\n\t            var disabled = 1;\n\t            if (this.contname) {\n\t                if (arguments[0] != undefined) {\n\t                    disabled = arguments[0];\n\t                }\n\t                this.contname.setDisabled(disabled);\n\t            }\n\t            return this;\n\t        }\n\t        //绑定或触发change\n\t\n\t    }, {\n\t        key: 'change',\n\t        value: function change(c, a) {\n\t            if (this.attrname) {\n\t                if (typeof c == 'function') {\n\t                    this.attrname.addOnChange(c, false);\n\t                    a && this.attrname.fireOnChange();\n\t                } else if (arguments.length === 0) {\n\t                    this.attrname.fireOnChange();\n\t                }\n\t            }\n\t            return this;\n\t        }\n\t        //移除change方法\n\t\n\t    }, {\n\t        key: 'removechange',\n\t        value: function removechange(a) {\n\t            if (this.attrname) {\n\t                this.attrname.removeOnChange(a);\n\t            }\n\t            return this;\n\t        }\n\t        //字段必填\n\t\n\t    }, {\n\t        key: 'required',\n\t        value: function required(a) {\n\t            if (this.attrname) {\n\t                this.attrname.setRequiredLevel(a ? 'required' : 'none');\n\t            }\n\t            return this;\n\t        }\n\t        //提交模式 默认设置成always, 对字段赋值会调用\n\t\n\t    }, {\n\t        key: 'mode',\n\t        value: function mode(m) {\n\t            if (this.attrname) {\n\t                var modestr = 'always';\n\t                switch (m) {\n\t                    case 1:\n\t                        modestr = 'always';\n\t                        break;\n\t                    case 0:\n\t                        modestr = 'never';\n\t                        break;\n\t                    default:\n\t                        break;\n\t                }\n\t                this.attrname.setSubmitMode(modestr);\n\t            }\n\t            return this;\n\t        }\n\t        // 默认值\n\t\n\t    }, {\n\t        key: 'default',\n\t        value: function _default(val) {\n\t            if (this.crmEntity.type() == 1) {\n\t                this.val(val);\n\t            }\n\t            return this;\n\t        }\n\t        //Lookup字段设置当前登录人\n\t\n\t    }, {\n\t        key: 'user',\n\t        value: function user() {\n\t            if (this.attrname) {\n\t                var toValue = {};\n\t                toValue.id = this.crmEntity.userid;\n\t                toValue.entityType = 'systemuser';\n\t                toValue.name = this.crmEntity.username;\n\t                this.val([toValue]);\n\t            }\n\t            return this;\n\t        }\n\t        //清除字段\n\t\n\t    }, {\n\t        key: 'clear',\n\t        value: function clear() {\n\t            if (this.attrname) {\n\t                this.val(null);\n\t            }\n\t            return this;\n\t        }\n\t        //设置焦点\n\t\n\t    }, {\n\t        key: 'focus',\n\t        value: function focus() {\n\t            if (this.contname) {\n\t                this.contname.setFocus();\n\t            }\n\t            return this;\n\t        }\n\t        // 当前提示类型判断 \n\t\n\t    }, {\n\t        key: 'type',\n\t        value: function type(_type) {\n\t            return new Promise(function (resolve, reject) {\n\t                this.crmEntity.type() == _type ? resolve(this) : reject(this);\n\t            });\n\t        }\n\t    }, {\n\t        key: 'error',\n\t        value: function error(message) {\n\t            window.console.error(message);\n\t        }\n\t        //保存\n\t\n\t    }, {\n\t        key: 'save',\n\t        value: function save() {\n\t            return this.crmEntity.save();\n\t        }\n\t    }]);\n\t\n\t    return crmAttr;\n\t}();\n\t\n\texports.crmAttr = crmAttr;\n\t\n\tvar crmEntity = exports.crmEntity = function () {\n\t    function crmEntity(Xrm) {\n\t        _classCallCheck(this, crmEntity);\n\t\n\t        this.Xrm = Xrm;\n\t    }\n\t    //获取实体Id 属性\n\t\n\t\n\t    _createClass(crmEntity, [{\n\t        key: 'save',\n\t\n\t        //保存\n\t        value: function save() {\n\t            return this.Xrm.Page.data.save();\n\t        }\n\t        //刷新按钮\n\t\n\t    }, {\n\t        key: 'refRibbon',\n\t        value: function refRibbon() {\n\t            return this.Xrm.Page.ui.refreshRibbon();\n\t        }\n\t        //刷新实体\n\t\n\t    }, {\n\t        key: 'refresh',\n\t        value: function refresh() {\n\t            this.Xrm.Utility.openEntityForm(this.Xrm.Page.data.entity.getEntityName(), this.Xrm.Page.data.entity.getId());\n\t        }\n\t        //禁用或启用窗体所有字段\n\t\n\t    }, {\n\t        key: 'disabledAll',\n\t        value: function disabledAll(state) {\n\t            this.Controls(this.Xrm.Page.ui.controls, 'disabled', state);\n\t        }\n\t        //禁用或启用\n\t\n\t    }, {\n\t        key: 'disabled',\n\t        value: function disabled(arr, state) {\n\t            this.Tabs(arr, 'disabled', state);\n\t        }\n\t        //显示\n\t\n\t    }, {\n\t        key: 'show',\n\t        value: function show(arr) {\n\t            this.Tabs(arr, 'show');\n\t        }\n\t        //隐藏\n\t\n\t    }, {\n\t        key: 'hide',\n\t        value: function hide(arr) {\n\t            this.Tabs(arr, 'hide');\n\t        }\n\t        //对tab下的字段控制\n\t\n\t    }, {\n\t        key: 'Tabs',\n\t        value: function Tabs(arr, handle, state) {\n\t            var _this = this;\n\t\n\t            var Xrm = this.Xrm;\n\t            var conArr = [].concat(arr);\n\t            arr.forEach(function (item) {\n\t                var tab = Xrm.Page.ui.tabs.get(item);\n\t                if (tab) {\n\t                    var index = conArr.indexOf(item);\n\t                    index > -1 && conArr.splice(index, 1);\n\t                    if (handle === 'hide' || handle === 'show') {\n\t                        var disabled = new crmAttr()[handle].bind({ contname: tab });\n\t                        disabled(state);\n\t                    } else {\n\t                        _this.Sections(tab.sections.get(), handle, state);\n\t                    }\n\t                }\n\t            });\n\t            this.Sections(conArr, handle, state);\n\t        }\n\t        //对Sections下的字段控制\n\t\n\t    }, {\n\t        key: 'Sections',\n\t        value: function Sections(sections, handle, state) {\n\t            var _this2 = this;\n\t\n\t            var conArr = [].concat(sections);\n\t            sections.forEach(function (section) {\n\t                var sec = section;\n\t                if (typeof sec === 'string') {\n\t                    sec = _this2.getSections(section) || sec;\n\t                }\n\t                if (typeof sec !== 'string') {\n\t                    var index = conArr.indexOf(section);\n\t                    index > -1 && conArr.splice(index, 1);\n\t                    _this2.Controls(sec.controls.get(), handle, state);\n\t                }\n\t            });\n\t            this.Controls(conArr, handle, state);\n\t        }\n\t    }, {\n\t        key: 'Controls',\n\t        value: function Controls(controls, handle, state) {\n\t            var _this3 = this;\n\t\n\t            controls.forEach(function (control) {\n\t                if (typeof control == 'string') {\n\t                    new crmAttr(_this3.Xrm, control)[handle](state);\n\t                } else {\n\t                    var controlType = control.getControlType();\n\t                    if (controlType != 'iframe' && controlType != 'webresource' && controlType != 'subgrid') {\n\t                        var disabled = new crmAttr()[handle].bind({ contname: control });\n\t                        disabled(state);\n\t                    }\n\t                }\n\t            });\n\t        }\n\t        //获取节对象Sections\n\t\n\t    }, {\n\t        key: 'getSections',\n\t        value: function getSections(name) {\n\t            var tabs = this.Xrm.Page.ui.tabs.get();\n\t            var _iteratorNormalCompletion = true;\n\t            var _didIteratorError = false;\n\t            var _iteratorError = undefined;\n\t\n\t            try {\n\t                for (var _iterator = tabs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t                    var tab = _step.value;\n\t\n\t                    var section = tab.sections.getFirst(function (section) {\n\t                        return section.getName() == name;\n\t                    });\n\t                    if (section) {\n\t                        return section;\n\t                    }\n\t                }\n\t            } catch (err) {\n\t                _didIteratorError = true;\n\t                _iteratorError = err;\n\t            } finally {\n\t                try {\n\t                    if (!_iteratorNormalCompletion && _iterator.return) {\n\t                        _iterator.return();\n\t                    }\n\t                } finally {\n\t                    if (_didIteratorError) {\n\t                        throw _iteratorError;\n\t                    }\n\t                }\n\t            }\n\t\n\t            return null;\n\t        }\n\t    }, {\n\t        key: 'id',\n\t        get: function get() {\n\t            return this.Xrm.Page.data.entity.getId();\n\t        }\n\t        //获取实体name 属性\n\t\n\t    }, {\n\t        key: 'name',\n\t        get: function get() {\n\t            return this.Xrm.Page.data.entity.getEntityName();\n\t        }\n\t        //获取实体类型 属性\n\t\n\t    }, {\n\t        key: 'type',\n\t        get: function get() {\n\t            return this.Xrm.Page.ui.getFormType();\n\t        }\n\t        //获取登录人id  属性\n\t\n\t    }, {\n\t        key: 'userid',\n\t        get: function get() {\n\t            return this.Xrm.Page.context.getUserId();\n\t        }\n\t        //获取登录人name 属性\n\t\n\t    }, {\n\t        key: 'username',\n\t        get: function get() {\n\t            return this.Xrm.Page.context.getUserName();\n\t        }\n\t        //判断是否是当前登录人 属性\n\t\n\t    }, {\n\t        key: 'isowner',\n\t        get: function get() {\n\t            return this.userid == new crmAttr(this.Xrm, 'ownerid').val();\n\t        }\n\t    }]);\n\n\t    return crmEntity;\n\t}();\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** crmApp.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/assets/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 34cf02288e6015411a04\n **/","import { crmEntity, crmAttr } from './common/crmEntity.js';\r\nexport class crmContext {\r\n    constructor(Xrm) {\r\n        this.Xrm = Xrm;\r\n    }\r\n    attr(name) {\r\n        return new crmAttr(this.Xrm, name);\r\n    }\r\n    get entity() {\r\n        return new crmEntity(this.Xrm)\r\n    }\r\n}\r\nwindow.crmContext = crmContext;\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/crmApp.js\n **/","    export class crmAttr {\r\n        constructor(Xrm, name) {\r\n            if (!Xrm || !name) {\r\n                return;\r\n            }\r\n            this.name = name;\r\n            this.attrname = Xrm.Page.getAttribute(name);\r\n            this.contname = Xrm.Page.getControl(name);\r\n            this.crmEntity = new crmEntity(Xrm);\r\n            if (!this.contname) {\r\n                this.contname = Xrm.Page.ui.tabs.get(name);\r\n            }\r\n            if (!this.attrname || !this.contname) {\r\n                this.error('not found ' + this.name);\r\n            }\r\n        }\r\n        //获取字段值 crm方法\r\n        getValue() {\r\n            const getval = this.attrname.getValue();\r\n            return getval;\r\n        }\r\n        //获取字段值 Lookup返回第一个值\r\n        get() {\r\n            if (!this.attrname) {\r\n                return this;\r\n            }\r\n            const getval = this.attrname.getValue();\r\n            if (Array.isArray(getval)) {\r\n                return getval.length > 0 ? getval[0] : {}\r\n            }\r\n            return getval;\r\n        }\r\n        //设置和获取值  lookup获取Id\r\n        val(v) {\r\n            let obj = null;\r\n            if (!this.attrname) {\r\n                return this;\r\n            }\r\n            obj = this.attrname[arguments.length > 0 ? 'setValue' : 'getValue'](v);\r\n            if (Array.isArray(obj)) {\r\n                obj = obj[0].id;\r\n            }\r\n            if (arguments.length > 0) {\r\n                this.mode();\r\n            }\r\n            return arguments.length === 0 ? obj : this;\r\n        }\r\n        //显示\r\n        show() {\r\n            if (this.contname) {\r\n                this.contname.setVisible(!0);\r\n            }\r\n            return this;\r\n        }\r\n        //隐藏\r\n        hide() {\r\n            if (this.contname) {\r\n                this.contname.setVisible(!1);\r\n            }\r\n            return this;\r\n        }\r\n        //禁用\r\n        disabled() {\r\n            let disabled = 1;\r\n            if (this.contname) {\r\n                if (arguments[0] != undefined) {\r\n                    disabled = arguments[0];\r\n                }\r\n                this.contname.setDisabled(disabled);\r\n            }\r\n            return this;\r\n        }\r\n        //绑定或触发change\r\n        change(c, a) {\r\n            if (this.attrname) {\r\n                if (typeof(c) == 'function') {\r\n                    this.attrname.addOnChange(c, false);\r\n                    a && this.attrname.fireOnChange();\r\n                } else if (arguments.length === 0) {\r\n                    this.attrname.fireOnChange();\r\n                }\r\n            }\r\n            return this;\r\n        }\r\n        //移除change方法\r\n        removechange(a) {\r\n            if (this.attrname) {\r\n                this.attrname.removeOnChange(a);\r\n            }\r\n            return this;\r\n        }\r\n        //字段必填\r\n        required(a) {\r\n            if (this.attrname) {\r\n                this.attrname.setRequiredLevel(a ? 'required' : 'none');\r\n            }\r\n            return this;\r\n        }\r\n        //提交模式 默认设置成always, 对字段赋值会调用\r\n        mode(m) {\r\n            if (this.attrname) {\r\n                let modestr = 'always';\r\n                switch (m) {\r\n                    case 1:\r\n                        modestr = 'always';\r\n                        break;\r\n                    case 0:\r\n                        modestr = 'never';\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                this.attrname.setSubmitMode(modestr);\r\n            }\r\n            return this;\r\n        }\r\n        // 默认值\r\n        default (val) {\r\n            if (this.crmEntity.type() == 1) {\r\n                this.val(val);\r\n            }\r\n            return this;\r\n        }\r\n        //Lookup字段设置当前登录人\r\n        user() {\r\n            if (this.attrname) {\r\n                let toValue = {};\r\n                toValue.id = this.crmEntity.userid;\r\n                toValue.entityType = 'systemuser';\r\n                toValue.name = this.crmEntity.username;\r\n                this.val([toValue]);\r\n            }\r\n            return this;\r\n        }\r\n        //清除字段\r\n        clear() {\r\n            if (this.attrname) {\r\n                this.val(null);\r\n            }\r\n            return this;\r\n        }\r\n        //设置焦点\r\n        focus() {\r\n            if (this.contname) {\r\n                this.contname.setFocus();\r\n            }\r\n            return this;\r\n        }\r\n        // 当前提示类型判断 \r\n        type(type) {\r\n            return new Promise(function(resolve, reject) {\r\n                this.crmEntity.type() == type ? resolve(this) : reject(this);\r\n            });\r\n        }\r\n        error(message) {\r\n            window.console.error(message);\r\n        }\r\n        //保存\r\n        save() {\r\n            return this.crmEntity.save();\r\n        }\r\n    }\r\n    export class crmEntity {\r\n        constructor(Xrm) {\r\n            this.Xrm = Xrm;\r\n        }\r\n        //获取实体Id 属性\r\n        get id() {\r\n            return this.Xrm.Page.data.entity.getId();\r\n        }\r\n        //获取实体name 属性\r\n        get name() {\r\n            return this.Xrm.Page.data.entity.getEntityName();\r\n        }\r\n        //获取实体类型 属性\r\n        get type() {\r\n            return this.Xrm.Page.ui.getFormType();\r\n        }\r\n        //获取登录人id  属性\r\n        get userid() {\r\n            return this.Xrm.Page.context.getUserId();\r\n        }\r\n        //获取登录人name 属性\r\n        get username() {\r\n            return this.Xrm.Page.context.getUserName();\r\n        }\r\n        //判断是否是当前登录人 属性\r\n        get isowner() {\r\n            return this.userid == new crmAttr(this.Xrm, 'ownerid').val();\r\n        }\r\n        //保存\r\n        save() {\r\n            return this.Xrm.Page.data.save();\r\n        }\r\n        //刷新按钮\r\n        refRibbon() {\r\n            return this.Xrm.Page.ui.refreshRibbon();\r\n        }\r\n        //刷新实体\r\n        refresh() {\r\n            this.Xrm.Utility.openEntityForm(this.Xrm.Page.data.entity.getEntityName(), this.Xrm.Page.data.entity.getId())\r\n        }\r\n        //禁用或启用窗体所有字段\r\n        disabledAll(state) {\r\n            this.Controls(this.Xrm.Page.ui.controls, 'disabled', state);\r\n        }\r\n        //禁用或启用\r\n        disabled(arr, state) {\r\n            this.Tabs(arr, 'disabled', state)\r\n        }\r\n        //显示\r\n        show(arr) {\r\n            this.Tabs(arr, 'show')\r\n        }\r\n        //隐藏\r\n        hide(arr) {\r\n            this.Tabs(arr, 'hide')\r\n        }\r\n        //对tab下的字段控制\r\n        Tabs(arr, handle, state) {\r\n            const Xrm = this.Xrm;\r\n            let conArr = [].concat(arr)\r\n            arr.forEach((item) => {\r\n                let tab = Xrm.Page.ui.tabs.get(item);\r\n                if (tab) {\r\n                    const index = conArr.indexOf(item);\r\n                    index > -1 && conArr.splice(index, 1);\r\n                    if (handle === 'hide' || handle === 'show') {\r\n                        const disabled = (new crmAttr())[handle].bind({ contname: tab });\r\n                        disabled(state);\r\n                    } else {\r\n                        this.Sections(tab.sections.get(), handle, state)\r\n                    }\r\n                }\r\n            })\r\n            this.Sections(conArr, handle, state);\r\n        }\r\n        //对Sections下的字段控制\r\n        Sections(sections, handle, state) {\r\n            let conArr = [].concat(sections)\r\n            sections.forEach((section) => {\r\n                let sec = section;\r\n                if (typeof sec === 'string') {\r\n                    sec = this.getSections(section) || sec;\r\n                }\r\n                if (typeof sec !== 'string') {\r\n                    const index = conArr.indexOf(section);\r\n                    index > -1 && conArr.splice(index, 1);\r\n                    this.Controls(sec.controls.get(), handle, state);\r\n                }\r\n            })\r\n            this.Controls(conArr, handle, state);\r\n        }\r\n        Controls(controls, handle, state) {\r\n            controls.forEach((control) => {\r\n                if (typeof control == 'string') {\r\n                    (new crmAttr(this.Xrm, control))[handle](state);\r\n                } else {\r\n                    var controlType = control.getControlType();\r\n                    if (controlType != 'iframe' && controlType != 'webresource' && controlType != 'subgrid') {\r\n                        const disabled = (new crmAttr())[handle].bind({ contname: control });\r\n                        disabled(state);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        //获取节对象Sections\r\n        getSections(name) {\r\n            const tabs = this.Xrm.Page.ui.tabs.get();\r\n            for (var tab of tabs) {\r\n                var section = tab.sections.getFirst((section) => {\r\n                    return section.getName() == name;\r\n                })\r\n                if (section) {\r\n                    return section;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/common/crmEntity.js\n **/"],"sourceRoot":""}